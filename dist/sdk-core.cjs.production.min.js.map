{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/glimmer.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport enum SupportedChainId {\n  MOONBEAM = 1284,\n  MOONBASE_ALPHA = 1287\n}\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [1284]: new Token(421611, '0xAcc15dC74880C9944775448304B263D191c6077F', 18, 'WGLMR', 'Wrapped Glimmer')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { NativeCurrency } from './nativeCurrency'\r\nimport { Token } from './token'\r\nimport { WETH9 } from './weth9'\r\n\r\n\r\nexport class Glimmer extends NativeCurrency {\r\n\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'GLMR', 'Glimmer')\r\n  }\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Glimmer } = {}\r\n\r\n  public static onChain(chainId: number): Glimmer {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glimmer(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n\r\n  public sortsBefore(): boolean {\r\n    return false\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["SupportedChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","BaseCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","Error","startsWith0xLen42HexRegex","Token","bypassChecksum","test","checkValidAddress","equals","other","isToken","this","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","_this","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","Glimmer","_cache","MAX_SAFE_INTEGER","ZERO","ONE","TWO","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}