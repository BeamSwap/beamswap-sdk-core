'use strict'
function t(t) {
  return t && 'object' == typeof t && 'default' in t ? t.default : t
}
Object.defineProperty(exports, '__esModule', { value: !0 })
var r,
  n,
  e,
  i = t(require('jsbi')),
  o = t(require('tiny-invariant')),
  a = require('@ethersproject/address'),
  u = t(require('decimal.js-light')),
  s = t(require('big.js')),
  c = t(require('toformat'))
;((r = exports.SupportedChainId || (exports.SupportedChainId = {}))[(r.MOONBEAM = 1284)] = 'MOONBEAM'),
  (r[(r.MOONBASE_ALPHA = 1287)] = 'MOONBASE_ALPHA'),
  ((n = exports.TradeType || (exports.TradeType = {}))[(n.EXACT_INPUT = 0)] = 'EXACT_INPUT'),
  (n[(n.EXACT_OUTPUT = 1)] = 'EXACT_OUTPUT'),
  ((e = exports.Rounding || (exports.Rounding = {}))[(e.ROUND_DOWN = 0)] = 'ROUND_DOWN'),
  (e[(e.ROUND_HALF_UP = 1)] = 'ROUND_HALF_UP'),
  (e[(e.ROUND_UP = 2)] = 'ROUND_UP')
var d = i.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')
function f(t, r) {
  for (var n = 0; n < r.length; n++) {
    var e = r[n]
    ;(e.enumerable = e.enumerable || !1),
      (e.configurable = !0),
      'value' in e && (e.writable = !0),
      Object.defineProperty(t, e.key, e)
  }
}
function l(t, r, n) {
  return r && f(t.prototype, r), n && f(t, n), t
}
function p(t, r) {
  ;(t.prototype = Object.create(r.prototype)), (t.prototype.constructor = t), (t.__proto__ = r)
}
var h = function(t, r, n, e) {
    Number.isSafeInteger(t) || o(!1),
      (r >= 0 && r < 255 && Number.isInteger(r)) || o(!1),
      (this.chainId = t),
      (this.decimals = r),
      (this.symbol = n),
      (this.name = e)
  },
  m = (function(t) {
    function r() {
      var r
      return ((r = t.apply(this, arguments) || this).isNative = !0), (r.isToken = !1), r
    }
    return p(r, t), r
  })(h)
function y(t) {
  try {
    return a.getAddress(t)
  } catch (r) {
    throw new Error(t + ' is not a valid address.')
  }
}
var v,
  g,
  x,
  w = /^0x[0-9a-fA-F]{40}$/,
  A = (function(t) {
    function r(r, n, e, i, o, a) {
      var u
      return (
        ((u = t.call(this, r, e, i, o) || this).isNative = !1),
        (u.isToken = !0),
        (u.address = a
          ? (function(t) {
              if (w.test(t)) return t
              throw new Error(t + ' is not a valid address.')
            })(n)
          : y(n)),
        u
      )
    }
    p(r, t)
    var n = r.prototype
    return (
      (n.equals = function(t) {
        return t.isToken && this.chainId === t.chainId && this.address.toLowerCase() === t.address.toLowerCase()
      }),
      (n.sortsBefore = function(t) {
        return (
          this.chainId !== t.chainId && o(!1),
          this.address.toLowerCase() === t.address.toLowerCase() && o(!1),
          this.address.toLowerCase() < t.address.toLowerCase()
        )
      }),
      l(r, [
        {
          key: 'wrapped',
          get: function() {
            return this
          }
        }
      ]),
      r
    )
  })(h),
  F =
    (((v = {})[1] = new A(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether')),
    (v[3] = new A(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether')),
    (v[4] = new A(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether')),
    (v[5] = new A(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether')),
    (v[42] = new A(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')),
    (v[10] = new A(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether')),
    (v[69] = new A(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether')),
    (v[42161] = new A(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether')),
    (v[421611] = new A(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')),
    (v[1284] = new A(421611, '0xAcc15dC74880C9944775448304B263D191c6077F', 18, 'WGLMR', 'Wrapped Glimmer')),
    v),
  _ = (function(t) {
    function r(r) {
      return t.call(this, r, 18, 'ETH', 'Ether') || this
    }
    return (
      p(r, t),
      (r.onChain = function(t) {
        var n
        return null != (n = this._etherCache[t]) ? n : (this._etherCache[t] = new r(t))
      }),
      (r.prototype.equals = function(t) {
        return t.isNative && t.chainId === this.chainId
      }),
      l(r, [
        {
          key: 'wrapped',
          get: function() {
            var t = F[this.chainId]
            return t || o(!1), t
          }
        }
      ]),
      r
    )
  })(m)
_._etherCache = {}
var E = c(u),
  N = c(s),
  b =
    (((g = {})[exports.Rounding.ROUND_DOWN] = E.ROUND_DOWN),
    (g[exports.Rounding.ROUND_HALF_UP] = E.ROUND_HALF_UP),
    (g[exports.Rounding.ROUND_UP] = E.ROUND_UP),
    g),
  O =
    (((x = {})[exports.Rounding.ROUND_DOWN] = 0),
    (x[exports.Rounding.ROUND_HALF_UP] = 1),
    (x[exports.Rounding.ROUND_UP] = 3),
    x),
  C = (function() {
    function t(t, r) {
      void 0 === r && (r = i.BigInt(1)), (this.numerator = i.BigInt(t)), (this.denominator = i.BigInt(r))
    }
    t.tryParseFraction = function(r) {
      if (r instanceof i || 'number' == typeof r || 'string' == typeof r) return new t(r)
      if ('numerator' in r && 'denominator' in r) return r
      throw new Error('Could not parse fraction')
    }
    var r = t.prototype
    return (
      (r.invert = function() {
        return new t(this.denominator, this.numerator)
      }),
      (r.add = function(r) {
        var n = t.tryParseFraction(r)
        return i.equal(this.denominator, n.denominator)
          ? new t(i.add(this.numerator, n.numerator), this.denominator)
          : new t(
              i.add(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)),
              i.multiply(this.denominator, n.denominator)
            )
      }),
      (r.subtract = function(r) {
        var n = t.tryParseFraction(r)
        return i.equal(this.denominator, n.denominator)
          ? new t(i.subtract(this.numerator, n.numerator), this.denominator)
          : new t(
              i.subtract(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)),
              i.multiply(this.denominator, n.denominator)
            )
      }),
      (r.lessThan = function(r) {
        var n = t.tryParseFraction(r)
        return i.lessThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator))
      }),
      (r.equalTo = function(r) {
        var n = t.tryParseFraction(r)
        return i.equal(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator))
      }),
      (r.greaterThan = function(r) {
        var n = t.tryParseFraction(r)
        return i.greaterThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator))
      }),
      (r.multiply = function(r) {
        var n = t.tryParseFraction(r)
        return new t(i.multiply(this.numerator, n.numerator), i.multiply(this.denominator, n.denominator))
      }),
      (r.divide = function(r) {
        var n = t.tryParseFraction(r)
        return new t(i.multiply(this.numerator, n.denominator), i.multiply(this.denominator, n.numerator))
      }),
      (r.toSignificant = function(t, r, n) {
        void 0 === r && (r = { groupSeparator: '' }),
          void 0 === n && (n = exports.Rounding.ROUND_HALF_UP),
          Number.isInteger(t) || o(!1),
          t > 0 || o(!1),
          E.set({ precision: t + 1, rounding: b[n] })
        var e = new E(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(t)
        return e.toFormat(e.decimalPlaces(), r)
      }),
      (r.toFixed = function(t, r, n) {
        return (
          void 0 === r && (r = { groupSeparator: '' }),
          void 0 === n && (n = exports.Rounding.ROUND_HALF_UP),
          Number.isInteger(t) || o(!1),
          t >= 0 || o(!1),
          (N.DP = t),
          (N.RM = O[n]),
          new N(this.numerator.toString()).div(this.denominator.toString()).toFormat(t, r)
        )
      }),
      l(t, [
        {
          key: 'quotient',
          get: function() {
            return i.divide(this.numerator, this.denominator)
          }
        },
        {
          key: 'remainder',
          get: function() {
            return new t(i.remainder(this.numerator, this.denominator), this.denominator)
          }
        },
        {
          key: 'asFraction',
          get: function() {
            return new t(this.numerator, this.denominator)
          }
        }
      ]),
      t
    )
  })(),
  D = c(s),
  T = (function(t) {
    function r(r, n, e) {
      var a
      return (
        (a = t.call(this, n, e) || this),
        i.lessThanOrEqual(a.quotient, d) || o(!1),
        (a.currency = r),
        (a.decimalScale = i.exponentiate(i.BigInt(10), i.BigInt(r.decimals))),
        a
      )
    }
    p(r, t),
      (r.fromRawAmount = function(t, n) {
        return new r(t, n)
      }),
      (r.fromFractionalAmount = function(t, n, e) {
        return new r(t, n, e)
      })
    var n = r.prototype
    return (
      (n.add = function(n) {
        this.currency.equals(n.currency) || o(!1)
        var e = t.prototype.add.call(this, n)
        return r.fromFractionalAmount(this.currency, e.numerator, e.denominator)
      }),
      (n.subtract = function(n) {
        this.currency.equals(n.currency) || o(!1)
        var e = t.prototype.subtract.call(this, n)
        return r.fromFractionalAmount(this.currency, e.numerator, e.denominator)
      }),
      (n.multiply = function(n) {
        var e = t.prototype.multiply.call(this, n)
        return r.fromFractionalAmount(this.currency, e.numerator, e.denominator)
      }),
      (n.divide = function(n) {
        var e = t.prototype.divide.call(this, n)
        return r.fromFractionalAmount(this.currency, e.numerator, e.denominator)
      }),
      (n.toSignificant = function(r, n, e) {
        return (
          void 0 === r && (r = 6),
          void 0 === e && (e = exports.Rounding.ROUND_DOWN),
          t.prototype.divide.call(this, this.decimalScale).toSignificant(r, n, e)
        )
      }),
      (n.toFixed = function(r, n, e) {
        return (
          void 0 === r && (r = this.currency.decimals),
          void 0 === e && (e = exports.Rounding.ROUND_DOWN),
          r <= this.currency.decimals || o(!1),
          t.prototype.divide.call(this, this.decimalScale).toFixed(r, n, e)
        )
      }),
      (n.toExact = function(t) {
        return (
          void 0 === t && (t = { groupSeparator: '' }),
          (D.DP = this.currency.decimals),
          new D(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(t)
        )
      }),
      l(r, [
        {
          key: 'wrapped',
          get: function() {
            return this.currency.isToken
              ? this
              : r.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)
          }
        }
      ]),
      r
    )
  })(C),
  I = new C(i.BigInt(100))
function U(t) {
  return new P(t.numerator, t.denominator)
}
var P = (function(t) {
    function r() {
      var r
      return ((r = t.apply(this, arguments) || this).isPercent = !0), r
    }
    p(r, t)
    var n = r.prototype
    return (
      (n.add = function(r) {
        return U(t.prototype.add.call(this, r))
      }),
      (n.subtract = function(r) {
        return U(t.prototype.subtract.call(this, r))
      }),
      (n.multiply = function(r) {
        return U(t.prototype.multiply.call(this, r))
      }),
      (n.divide = function(r) {
        return U(t.prototype.divide.call(this, r))
      }),
      (n.toSignificant = function(r, n, e) {
        return void 0 === r && (r = 5), t.prototype.multiply.call(this, I).toSignificant(r, n, e)
      }),
      (n.toFixed = function(r, n, e) {
        return void 0 === r && (r = 2), t.prototype.multiply.call(this, I).toFixed(r, n, e)
      }),
      r
    )
  })(C),
  R = (function(t) {
    function r() {
      for (var r, n, e, o, a, u = arguments.length, s = new Array(u), c = 0; c < u; c++) s[c] = arguments[c]
      if (4 === s.length) (n = s[0]), (e = s[1]), (o = s[2]), (a = s[3])
      else {
        var d = s[0].quoteAmount.divide(s[0].baseAmount),
          f = [s[0].baseAmount.currency, s[0].quoteAmount.currency, d.denominator, d.numerator]
        ;(n = f[0]), (e = f[1]), (o = f[2]), (a = f[3])
      }
      return (
        ((r = t.call(this, a, o) || this).baseCurrency = n),
        (r.quoteCurrency = e),
        (r.scalar = new C(
          i.exponentiate(i.BigInt(10), i.BigInt(n.decimals)),
          i.exponentiate(i.BigInt(10), i.BigInt(e.decimals))
        )),
        r
      )
    }
    p(r, t)
    var n = r.prototype
    return (
      (n.invert = function() {
        return new r(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)
      }),
      (n.multiply = function(n) {
        this.quoteCurrency.equals(n.baseCurrency) || o(!1)
        var e = t.prototype.multiply.call(this, n)
        return new r(this.baseCurrency, n.quoteCurrency, e.denominator, e.numerator)
      }),
      (n.quote = function(r) {
        r.currency.equals(this.baseCurrency) || o(!1)
        var n = t.prototype.multiply.call(this, r)
        return T.fromFractionalAmount(this.quoteCurrency, n.numerator, n.denominator)
      }),
      (n.toSignificant = function(t, r, n) {
        return void 0 === t && (t = 6), this.adjustedForDecimals.toSignificant(t, r, n)
      }),
      (n.toFixed = function(t, r, n) {
        return void 0 === t && (t = 4), this.adjustedForDecimals.toFixed(t, r, n)
      }),
      l(r, [
        {
          key: 'adjustedForDecimals',
          get: function() {
            return t.prototype.multiply.call(this, this.scalar)
          }
        }
      ]),
      r
    )
  })(C),
  q = (function(t) {
    function r(r) {
      return t.call(this, r, 18, 'GLMR', 'Glimmer') || this
    }
    p(r, t),
      (r.onChain = function(t) {
        var n
        return null != (n = this._cache[t]) ? n : (this._cache[t] = new r(t))
      })
    var n = r.prototype
    return (
      (n.equals = function(t) {
        return t.isNative && t.chainId === this.chainId
      }),
      (n.sortsBefore = function() {
        return !1
      }),
      l(r, [
        {
          key: 'wrapped',
          get: function() {
            var t = F[this.chainId]
            return t || o(!1), t
          }
        }
      ]),
      r
    )
  })(m)
q._cache = {}
var B = i.BigInt(Number.MAX_SAFE_INTEGER),
  W = i.BigInt(0),
  S = i.BigInt(1),
  H = i.BigInt(2)
;(exports.CurrencyAmount = T),
  (exports.Ether = _),
  (exports.Fraction = C),
  (exports.Glimmer = q),
  (exports.MaxUint256 = d),
  (exports.NativeCurrency = m),
  (exports.Percent = P),
  (exports.Price = R),
  (exports.Token = A),
  (exports.WETH9 = F),
  (exports.computePriceImpact = function(t, r, n) {
    var e = t.quote(r),
      i = e.subtract(n).divide(e)
    return new P(i.numerator, i.denominator)
  }),
  (exports.sortedInsert = function(t, r, n, e) {
    if ((n > 0 || o(!1), t.length <= n || o(!1), 0 === t.length)) return t.push(r), null
    var i = t.length === n
    if (i && e(t[t.length - 1], r) <= 0) return r
    for (var a = 0, u = t.length; a < u; ) {
      var s = (a + u) >>> 1
      e(t[s], r) <= 0 ? (a = s + 1) : (u = s)
    }
    return t.splice(a, 0, r), i ? t.pop() : null
  }),
  (exports.sqrt = function(t) {
    if ((i.greaterThanOrEqual(t, W) || o(!1), i.lessThan(t, B))) return i.BigInt(Math.floor(Math.sqrt(i.toNumber(t))))
    var r, n
    for (r = t, n = i.add(i.divide(t, H), S); i.lessThan(n, r); ) (r = n), (n = i.divide(i.add(i.divide(t, n), n), H))
    return r
  }),
  (exports.validateAndParseAddress = y)
//# sourceMappingURL=sdk-core.cjs.production.min.js.map
